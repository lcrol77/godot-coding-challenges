[gd_scene load_steps=10 format=3 uid="uid://cm28su6dqvq1i"]

[ext_resource type="Script" path="res://components/card/card.gd" id="1_fd5em"]
[ext_resource type="Texture2D" uid="uid://c44yepmbgd234" path="res://visuals/Tiles_A_white.png" id="2_xkmn3"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_xlx8s"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_6y2q7"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_6iiqr"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_qo8yq"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_sqm1g"]

[sub_resource type="Shader" id="Shader_d4cu3"]
code = "shader_type canvas_item;

uniform vec2 rect_size;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-360.0, 360.0) = 0.0;
uniform float x_rot : hint_range(-360.0, 360.0) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code

varying flat vec2 o;
varying vec3 p;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	// to (rect_size is a uniform):
	VERTEX += (UV - 0.5) * rect_size * t * (1.0 - inset);

//	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment(){
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o;
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8ntqh"]
resource_local_to_scene = true
shader = SubResource("Shader_d4cu3")
shader_parameter/rect_size = Vector2(152, 207)
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/y_rot = 0.0
shader_parameter/x_rot = 0.0
shader_parameter/inset = 0.0

[node name="Card" type="Button"]
custom_minimum_size = Vector2(152, 207)
offset_right = 152.0
offset_bottom = 207.0
theme_override_styles/focus = SubResource("StyleBoxEmpty_xlx8s")
theme_override_styles/disabled = SubResource("StyleBoxEmpty_6y2q7")
theme_override_styles/hover = SubResource("StyleBoxEmpty_6iiqr")
theme_override_styles/pressed = SubResource("StyleBoxEmpty_qo8yq")
theme_override_styles/normal = SubResource("StyleBoxEmpty_sqm1g")
script = ExtResource("1_fd5em")

[node name="Shadow" type="TextureRect" parent="."]
modulate = Color(0, 0, 0, 1)
self_modulate = Color(1, 1, 1, 0.168627)
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_top = 27.0
offset_bottom = 27.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("2_xkmn3")
expand_mode = 1
stretch_mode = 5

[node name="CardTexture" type="TextureRect" parent="."]
material = SubResource("ShaderMaterial_8ntqh")
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("2_xkmn3")
expand_mode = 1
stretch_mode = 5

[connection signal="gui_input" from="." to="." method="_on_gui_input"]
[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_mouse_exited"]
